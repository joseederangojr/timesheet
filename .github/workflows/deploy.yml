name: deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      ref:
        description: "Tag or branch to deploy (leave empty for latest release)"
        required: false
        type: string

jobs:
  deploy:
    environment: production
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Deploy to via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ github.event.inputs.ref || github.event.release.tag_name }}
          SSH_NODE: ${{ secrets.SSH_NODE }}
          SSH_DEPLOY_PATH: ${{ secrets.SSH_DEPLOY_PATH }}
          SSH_APP_PATH: ${{ secrets.SSH_APP_PATH }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          APP_NAME: ${{ vars.APP_NAME }}
          APP_ENV: ${{ vars.APP_ENV }}
          APP_KEY: ${{ vars.APP_KEY }}
          APP_DEBUG: ${{ vars.APP_DEBUG }}
          APP_URL: ${{ vars.APP_URL }}
          APP_LOCALE: ${{ vars.APP_LOCALE }}
          APP_FALLBACK_LOCALE: ${{ vars.APP_FALLBACK_LOCALE }}
          APP_FAKER_LOCALE: ${{ vars.APP_FAKER_LOCALE }}
          APP_MAINTENANCE_DRIVER: ${{ vars.APP_MAINTENANCE_DRIVER }}
          BCRYPT_ROUNDS: ${{ vars.BCRYPT_ROUNDS }}
          LOG_CHANNEL: ${{ vars.LOG_CHANNEL }}
          LOG_STACK: ${{ vars.LOG_STACK }}
          LOG_DEPRECATIONS_CHANNEL: ${{ vars.LOG_DEPRECATIONS_CHANNEL }}
          LOG_LEVEL: ${{ vars.LOG_LEVEL }}
          DB_CONNECTION: ${{ vars.DB_CONNECTION }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_DATABASE: ${{ vars.DB_DATABASE }}
          DB_USERNAME: ${{ vars.DB_USERNAME }}
          DB_PASSWORD: ${{ vars.DB_PASSWORD }}
          SESSION_DRIVER: ${{ vars.SESSION_DRIVER }}
          SESSION_LIFETIME: ${{ vars.SESSION_LIFETIME }}
          SESSION_ENCRYPT: ${{ vars.SESSION_ENCRYPT }}
          SESSION_PATH: ${{ vars.SESSION_PATH }}
          SESSION_DOMAIN: ${{ vars.SESSION_DOMAIN }}
          BROADCAST_CONNECTION: ${{ vars.BROADCAST_CONNECTION }}
          FILESYSTEM_DISK: ${{ vars.FILESYSTEM_DISK }}
          QUEUE_CONNECTION: ${{ vars.QUEUE_CONNECTION }}
          CACHE_STORE: ${{ vars.CACHE_STORE }}
          MAIL_MAILER: ${{ vars.MAIL_MAILER }}
          MAIL_SCHEME: ${{ vars.MAIL_SCHEME }}
          MAIL_HOST: ${{ vars.MAIL_HOST }}
          MAIL_PORT: ${{ vars.MAIL_PORT }}
          MAIL_USERNAME: ${{ vars.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ vars.MAIL_PASSWORD }}
          MAIL_FROM_ADDRESS: ${{ vars.MAIL_FROM_ADDRESS }}
          MAIL_FROM_NAME: ${{ vars.MAIL_FROM_NAME }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          envs: GITHUB_TOKEN,RELEASE_TAG,SSH_NODE,SSH_DEPLOY_PATH,SSH_APP_PATH,GITHUB_REPOSITORY,APP_NAME,APP_ENV,APP_KEY,APP_DEBUG,APP_URL,APP_LOCALE,APP_FALLBACK_LOCALE,APP_FAKER_LOCALE,APP_MAINTENANCE_DRIVER,BCRYPT_ROUNDS,LOG_CHANNEL,LOG_STACK,LOG_DEPRECATIONS_CHANNEL,LOG_LEVEL,DB_CONNECTION,DB_HOST,DB_PORT,DB_DATABASE,DB_USERNAME,DB_PASSWORD,SESSION_DRIVER,SESSION_LIFETIME,SESSION_ENCRYPT,SESSION_PATH,SESSION_DOMAIN,BROADCAST_CONNECTION,FILESYSTEM_DISK,QUEUE_CONNECTION,CACHE_STORE,MAIL_MAILER,MAIL_SCHEME,MAIL_HOST,MAIL_PORT,MAIL_USERNAME,MAIL_PASSWORD,MAIL_FROM_ADDRESS
          script: |
            DEPLOY_PATH="${SSH_DEPLOY_PATH:-/home/$(whoami)/public_html}"
            RELEASE_DIR="$DEPLOY_PATH/releases/$(date +%Y%m%d_%H%M%S)"
            CURRENT_LINK="$SSH_APP_PATH"
            SHARED_DIR="$DEPLOY_PATH/shared"

            echo "🚀 Starting deployment to $DEPLOY_PATH"

            # Create directory structure
            mkdir -p "$DEPLOY_PATH/releases"
            mkdir -p "$DEPLOY_PATH/shared/storage/{logs,framework}"
            mkdir -p "$DEPLOY_PATH/shared/storage/framework/{cache,sessions,views}"
            mkdir -p "$DEPLOY_PATH/shared/bootstrap/cache"

            # Create release directory
            mkdir -p "$RELEASE_DIR"

            # Clone the repository at the specific tag
            echo "📥 Cloning repository at tag $RELEASE_TAG..."
            cd "$RELEASE_DIR"
            git clone https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY.git . --branch "$RELEASE_TAG" --depth 1

            # Setup environment file
            echo "⚙️ Setting up environment..."
            echo "APP_NAME=\"$APP_NAME\"" >> .env
            echo "APP_ENV=$APP_ENV" >> .env
            echo "APP_KEY=$APP_KEY" >> .env
            echo "APP_DEBUG=$APP_DEBUG" >> .env
            echo "APP_URL=$APP_URL" >> .env
            echo "APP_LOCALE=$APP_LOCALE" >> .env
            echo "APP_FALLBACK_LOCALE=$APP_FALLBACK_LOCALE" >> .env
            echo "APP_FAKER_LOCALE=$APP_FAKER_LOCALE" >> .env
            echo "APP_MAINTENANCE_DRIVER=$APP_MAINTENANCE_DRIVER" >> .env
            echo "BCRYPT_ROUNDS=$BCRYPT_ROUNDS" >> .env
            echo "LOG_CHANNEL=$LOG_CHANNEL" >> .env
            echo "LOG_STACK=$LOG_STACK" >> .env
            echo "LOG_DEPRECATIONS_CHANNEL=$LOG_DEPRECATIONS_CHANNEL" >> .env
            echo "LOG_LEVEL=$LOG_LEVEL" >> .env
            echo "DB_CONNECTION=$DB_CONNECTION" >> .env
            echo "DB_HOST=$DB_HOST" >> .env
            echo "DB_PORT=$DB_PORT" >> .env
            echo "DB_DATABASE=$DB_DATABASE" >> .env
            echo "DB_USERNAME=$DB_USERNAME" >> .env
            echo "DB_PASSWORD=$DB_PASSWORD" >> .env
            echo "SESSION_DRIVER=$SESSION_DRIVER" >> .env
            echo "SESSION_LIFETIME=$SESSION_LIFETIME" >> .env
            echo "SESSION_ENCRYPT=$SESSION_ENCRYPT" >> .env
            echo "SESSION_PATH=$SESSION_PATH" >> .env
            echo "SESSION_DOMAIN=$SESSION_DOMAIN" >> .env
            echo "BROADCAST_CONNECTION=$BROADCAST_CONNECTION" >> .env
            echo "FILESYSTEM_DISK=$FILESYSTEM_DISK" >> .env
            echo "QUEUE_CONNECTION=$QUEUE_CONNECTION" >> .env
            echo "CACHE_STORE=$CACHE_STORE" >> .env
            echo "MAIL_MAILER=$MAIL_MAILER" >> .env
            echo "MAIL_SCHEME=$MAIL_SCHEME" >> .env
            echo "MAIL_HOST=$MAIL_HOST" >> .env
            echo "MAIL_PORT=$MAIL_PORT" >> .env
            echo "MAIL_USERNAME=$MAIL_USERNAME" >> .env
            echo "MAIL_PASSWORD=$MAIL_PASSWORD" >> .env
            echo "MAIL_FROM_ADDRESS=\"$MAIL_FROM_ADDRESS\"" >> .env
            echo "MAIL_FROM_NAME=\"$MAIL_FROM_NAME\"" >> .env
            echo "VITE_APP_NAME=\"$APP_NAME\"" >> .env
            echo "✅ Generated .env"

            # Install PHP dependencies
            echo "📦 Installing PHP dependencies..."
            composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

            # Install Node dependencies and build assets
            echo "🔨 Building assets..."
            source $SSH_NODE
            npm install --prefer-cache
            npm run build:ssr

            # Setup Laravel storage and cache links
            echo "🔗 Setting up Laravel links..."
            rm -rf storage bootstrap/cache
            ln -s "$SHARED_DIR/storage" storage
            ln -s "$SHARED_DIR/bootstrap/cache" bootstrap/cache

            # Set proper permissions
            echo "📁 Setting permissions..."
            chmod -R 755 storage bootstrap/cache
            chmod -R 777 storage/logs storage/framework/cache storage/framework/sessions storage/framework/views

            # Generate application key if not set
            if ! grep -q "^APP_KEY=" .env || grep -q "^APP_KEY=$" .env; then
              echo "🔑 Generating application key..."
              php artisan key:generate
            fi

            # Clear and cache configuration
            echo "⚡ Optimizing Laravel..."
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
            php artisan route:clear

            # Run database migrations (uncomment if needed)
            echo "🗄️ Running migrations..."
            php artisan migrate --force

            # Create storage link
            echo "🔗 Creating storage symlink..."
            php artisan storage:link

            # Cache for production
            echo "🚀 Caching for production..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            echo "🔄 Restarting inertia ssr server"
            php artisan inertia:stop-ssr

            # Update current symlink
            echo "🔄 Updating current symlink..."
            ln -sfn $RELEASE_DIR $CURRENT_LINK


            # Clean up old releases (keep last 5)
            echo "🧹 Cleaning up old releases..."
            cd "$DEPLOY_PATH/releases"
            ls -t | tail -n +6 | xargs -r rm -rf

            echo "✅ Deployment completed successfully!"
            echo "🌐 Your application should be available at your domain"
