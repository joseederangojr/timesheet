name: release

on:
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release even if tests fail'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for semantic-release

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2
          coverage: xdebug

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Get Composer Cache Directory
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer Dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Cache npm Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Install Node Dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list playwright --depth=0 --json | jq -r '.dependencies.playwright.version // .devDependencies.playwright.version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright Browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Install Playwright System Dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Cache Rector
        uses: actions/cache@v4
        with:
          path: /tmp/rector
          key: ${{ runner.os }}-rector-${{ hashFiles('**/composer.lock', 'rector.php') }}
          restore-keys: |
            ${{ runner.os }}-rector-

      - name: Cache PHPStan
        uses: actions/cache@v4
        with:
          path: /tmp/phpstan
          key: ${{ runner.os }}-phpstan-${{ hashFiles('**/composer.lock', 'phpstan.neon') }}
          restore-keys: |
            ${{ runner.os }}-phpstan-

      - name: Create cache directories
        run: |
          mkdir -p /tmp/rector
          mkdir -p /tmp/phpstan

      - name: Setup Laravel Environment
        run: |
          cp .env.example .env
          rm .env.testing
          php artisan key:generate
          touch database/database.sqlite

      - name: Run Database Migrations
        run: php artisan migrate --force

      - name: Cache Laravel Configuration
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          chmod -R 777 storage bootstrap/cache

      - name: Run Linting and Static Analysis
        run: |
          npm run format
          npm run lint
          npm run test:types
          npm run build
          vendor/bin/rector process
          vendor/bin/phpstan --memory-limit=2G
          npm run format:php
          vendor/bin/pint -p

      - name: Run All Tests
        run: php artisan test
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite

      - name: Store Browser Screenshots
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: browser-screenshots-${{ github.run_id }}
          path: |
            tests/Browser/Screenshots
          retention-days: 3

      - name: Build Production Assets
        run: npm run build

      - name: Generate Build Hash
        id: build-hash
        run: |
          echo "hash=$(find public/build -type f -exec sha256sum {} \; | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Cache Build Artifacts
        uses: actions/cache@v4
        with:
          path: |
            public/build
            bootstrap/ssr
            vendor
            node_modules/.cache
          key: ${{ runner.os }}-release-artifacts-${{ steps.build-hash.outputs.hash }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ github.run_id }}
          path: |
            public/build
            bootstrap/ssr
            composer.json
            composer.lock
            package.json
            package-lock.json
          retention-days: 1

      - name: Check if release is needed
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use semantic-release in dry-run mode to check if release is needed
          if npx semantic-release --dry-run --no-ci | grep -q "The next release version is"; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "Release is needed"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "No release needed"
          fi

      - name: Perform Release
        id: release
        if: steps.check.outputs.should-release == 'true' || inputs.force_release == true
        env:
          NAME: production
          URL: ${{ steps.release.outputs.release-url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          # Run semantic-release and capture output
          npx semantic-release > release-output.txt 2>&1

          # Extract release URL if available
          if grep -q "Published release" release-output.txt; then
            RELEASE_URL=$(grep -o 'https://github\.com[^[:space:]]*' release-output.txt | head -1)
            echo "release-url=$RELEASE_URL" >> $GITHUB_OUTPUT
          fi

      - name: Upload Release Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-logs-${{ github.run_id }}
          path: release-output.txt
          retention-days: 7

      - name: Delete Build Artifacts
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('release-artifacts-')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }
