name: release

on:
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release even if tests fail'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  # Call the test workflow to avoid duplication
  test:
    uses: ./.github/workflows/tests.yml
    secrets: inherit

  # Build and prepare release artifacts
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      build-hash: ${{ steps.build-hash.outputs.hash }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for semantic-release

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Get Composer Cache Directory
        id: composer-cache-dir
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer Dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Cache npm Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Dependencies
        run: composer install --no-interaction --prefer-dist --optimize-autoloader --no-dev

      - name: Install Node Dependencies
        run: npm ci

      - name: Cache Vite Build Output
        uses: actions/cache@v4
        with:
          path: |
            public/build
            bootstrap/ssr
          key: ${{ runner.os }}-vite-release-${{ hashFiles('**/package-lock.json', 'vite.config.*', 'resources/**/*') }}
          restore-keys: |
            ${{ runner.os }}-vite-release-
            ${{ runner.os }}-vite-

      - name: Build Production Assets
        run: npm run build

      - name: Generate Build Hash
        id: build-hash
        run: |
          echo "hash=$(find public/build -type f -exec sha256sum {} \; | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Cache Build Artifacts
        uses: actions/cache@v4
        with:
          path: |
            public/build
            bootstrap/ssr
            vendor
            node_modules/.cache
          key: ${{ runner.os }}-release-artifacts-${{ steps.build-hash.outputs.hash }}

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ github.run_id }}
          path: |
            public/build
            bootstrap/ssr
            composer.json
            composer.lock
            package.json
            package-lock.json
          retention-days: 1

  # Check if release is needed
  check-release:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [test, build]
    if: success() || inputs.force_release == true
    outputs:
      should-release: ${{ steps.check.outputs.should-release }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Cache npm Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node Dependencies
        run: npm ci

      - name: Check if release is needed
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use semantic-release in dry-run mode to check if release is needed
          if npx semantic-release --dry-run --no-ci | grep -q "The next release version is"; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "Release is needed"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "No release needed"
          fi

  # Perform the actual release
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, build, check-release]
    if: needs.check-release.outputs.should-release == 'true'
    environment:
      name: production
      url: ${{ steps.release.outputs.release-url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.4
          tools: composer:v2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ github.run_id }}

      - name: Restore Build Artifacts Cache
        uses: actions/cache@v4
        with:
          path: |
            public/build
            bootstrap/ssr
            vendor
            node_modules/.cache
          key: ${{ runner.os }}-release-artifacts-${{ needs.build.outputs.build-hash }}

      - name: Cache npm Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node Dependencies
        run: npm ci

      - name: Setup Laravel Environment
        run: |
          cp .env.example .env
          cp .env.testing .env.testing
          php artisan key:generate

      - name: Run Database Migrations
        run: php artisan migrate --force

      - name: Perform Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
        run: |
          # Run semantic-release and capture output
          npx semantic-release > release-output.txt 2>&1

          # Extract release URL if available
          if grep -q "Published release" release-output.txt; then
            RELEASE_URL=$(grep -o 'https://github\.com[^[:space:]]*' release-output.txt | head -1)
            echo "release-url=$RELEASE_URL" >> $GITHUB_OUTPUT
          fi

      - name: Upload Release Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-logs-${{ github.run_id }}
          path: release-output.txt
          retention-days: 7

  # Cleanup artifacts after successful release
  cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [release]
    if: always()

    steps:
      - name: Delete Build Artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('release-artifacts-')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }
